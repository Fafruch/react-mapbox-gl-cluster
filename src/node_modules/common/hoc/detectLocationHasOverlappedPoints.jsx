import React, { PureComponent } from "react";
import PropTypes from "prop-types";
import _ from "lodash";
import { findPointsWithSameLocation } from "../common";
import { ClusterOptions } from "../constants";

const detectLocationHasOverlappedPoints = WrappedComponent => {
  class LayerWithOverlappedPointComponent extends PureComponent {
    static contextTypes = {
      map: PropTypes.object
    };

    onClick = (properties, lngLat, event, meta) => {
      const { onClick } = this.props;
      this._handleClick(properties, lngLat, event, meta, onClick);
    };

    onClusterClick = (properties, lngLat, event, meta) => {
      const { onClusterClick } = this.props;
      this._handleClick(properties, lngLat, event, meta, onClusterClick);
    };

    _handleClick(properties, lngLat, event, meta, callback) {
      const { data, onClickOverlappedPoints } = this.props;
      const { map } = this.context;
      const zoom = map.getMaxZoom() - 2;
      const points = findPointsWithSameLocation(
        data,
        lngLat,
        map,
        ClusterOptions.NearestPointsRadius,
        zoom
      );
      if (points) {
        if (_.isFunction(onClickOverlappedPoints)) {
          onClickOverlappedPoints(points, lngLat, event, meta);
          return false;
        }
      } else if (_.isFunction(callback)) {
        callback(properties, lngLat, event, meta);
      }

      return true;
    }

    render() {
      const props = {
        ...this.props,
        onClick: this.onClick,
        onClusterClick: this.onClusterClick
      };

      return <WrappedComponent {...props} />;
    }
  }

  LayerWithOverlappedPointComponent.propTypes = {
    ...WrappedComponent.propTypes,
    /**
     * [Optional] Handle when user click on a location which has overlapped points
     */
    onClickOverlappedPoints: PropTypes.func
  };

  LayerWithOverlappedPointComponent.defaultProps = {
    ...WrappedComponent.defaultProps
  };

  return LayerWithOverlappedPointComponent;
};

export default detectLocationHasOverlappedPoints;
